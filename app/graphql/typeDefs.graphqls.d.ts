/* 392a08e9bbda89e32a687cfb844e1c7457a2cb93
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type RequireFields<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Date: any;
};
export declare type Community = {
    __typename?: 'Community';
    id: Scalars['ID'];
    bbs: Scalars['String'];
    no: Scalars['String'];
    url: Scalars['String'];
    category: Scalars['String'];
    title: Scalars['String'];
    date: Scalars['Date'];
    views: Scalars['Int'];
    hasMovie?: Maybe<Scalars['Boolean']>;
    hasImage?: Maybe<Scalars['Boolean']>;
};
export declare type Media = {
    __typename?: 'Media';
    id: Scalars['ID'];
    no: Scalars['String'];
    category: Scalars['String'];
    url: Scalars['String'];
    title: Scalars['String'];
    date: Scalars['Date'];
    thumb: Scalars['String'];
    views: Scalars['Int'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    viewCommunity?: Maybe<Community>;
    viewMedia?: Maybe<Media>;
};
export declare type MutationViewCommunityArgs = {
    data?: Maybe<ViewCommunity>;
};
export declare type MutationViewMediaArgs = {
    data?: Maybe<ViewMedia>;
};
export declare type Query = {
    __typename?: 'Query';
    getCommunityList?: Maybe<Array<Maybe<Community>>>;
    getMediaList?: Maybe<Array<Maybe<Media>>>;
};
export declare type QueryGetCommunityListArgs = {
    type?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    bbs?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
    lastID?: Maybe<Scalars['ID']>;
};
export declare type QueryGetMediaListArgs = {
    title?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
    lastID?: Maybe<Scalars['ID']>;
};
export declare type ViewCommunity = {
    bbs: Scalars['String'];
    no: Scalars['String'];
};
export declare type ViewMedia = {
    no: Scalars['String'];
};
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Query: ResolverTypeWrapper<{}>;
    String: ResolverTypeWrapper<Scalars['String']>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    Community: ResolverTypeWrapper<Community>;
    Date: ResolverTypeWrapper<Scalars['Date']>;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
    Media: ResolverTypeWrapper<Media>;
    Mutation: ResolverTypeWrapper<{}>;
    ViewCommunity: ViewCommunity;
    ViewMedia: ViewMedia;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Query: {};
    String: Scalars['String'];
    ID: Scalars['ID'];
    Community: Community;
    Date: Scalars['Date'];
    Int: Scalars['Int'];
    Boolean: Scalars['Boolean'];
    Media: Media;
    Mutation: {};
    ViewCommunity: ViewCommunity;
    ViewMedia: ViewMedia;
};
export declare type CommunityResolvers<ContextType = any, ParentType extends ResolversParentTypes['Community'] = ResolversParentTypes['Community']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    bbs?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    no?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    category?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
    views?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    hasMovie?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    hasImage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
    name: 'Date';
}
export declare type MediaResolvers<ContextType = any, ParentType extends ResolversParentTypes['Media'] = ResolversParentTypes['Media']> = {
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    no?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    category?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    date?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
    thumb?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    views?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
    viewCommunity?: Resolver<Maybe<ResolversTypes['Community']>, ParentType, ContextType, RequireFields<MutationViewCommunityArgs, never>>;
    viewMedia?: Resolver<Maybe<ResolversTypes['Media']>, ParentType, ContextType, RequireFields<MutationViewMediaArgs, never>>;
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    getCommunityList?: Resolver<Maybe<Array<Maybe<ResolversTypes['Community']>>>, ParentType, ContextType, RequireFields<QueryGetCommunityListArgs, never>>;
    getMediaList?: Resolver<Maybe<Array<Maybe<ResolversTypes['Media']>>>, ParentType, ContextType, RequireFields<QueryGetMediaListArgs, never>>;
};
export declare type Resolvers<ContextType = any> = {
    Community?: CommunityResolvers<ContextType>;
    Date?: GraphQLScalarType;
    Media?: MediaResolvers<ContextType>;
    Mutation?: MutationResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
};
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;

          
// This is an extra code in addition to what graphql-codegen makes.
// Users are likely to use 'graphql-tag/loader' with 'graphql-tag/schema/loader'
// in webpack. This code enables the result to be typed.
import { DocumentNode } from 'graphql'
export default typeof DocumentNode
